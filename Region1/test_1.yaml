AWSTemplateFormatVersion: '2010-09-09'
  
Parameters:
  EnvironmentName:
    Type: String
    Default: "EC2 Image Builder Sample"
  AmazonLinux2LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  BuildInstanceType:
    Type: String
    Default: "t2.micro"
    Description: "Image Builder instance type"
  SampleAutoScalingGroupInstanceType:
    Type: String
    Default: "t2.micro"
    Description: Instance type for sample Auto Scaling group
  Email:
    Type: String
    Default: kofdx7@gmail.com


Resources:
  InstanceRefreshHandler:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt InstanceRefreshHandlerLambdaRole.Arn
      CodeUri: InstanceRefreshHandler/
      Environment:
        Variables:
          AutoScalingGroupName: !Ref SampleAutoScalingGroup
  
  InstanceRefreshHandlerLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement: 
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/service-role/"
      Policies:
      - PolicyName: lambdaExecution-InstanceRefreshHandler
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - autoscaling:StartInstanceRefresh
            - autoscaling:Describe*
            - ec2:CreateLaunchTemplateVersion
            - ec2:DescribeLaunchTemplates
            Resource: '*'

  ImageBuilderSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: !GetAtt InstanceRefreshHandler.Arn
          Protocol: lambda
          
  SNSLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
        FunctionName: !GetAtt InstanceRefreshHandler.Arn
        Action: lambda:InvokeFunction
        Principal: sns.amazonaws.com
        SourceArn: !Ref ImageBuilderSNSTopic

  EC2ImageBuilderRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: SampleEC2ImageBuilderRecipe
      Description: This recipe updates the system and installs Docker CE 
      ParentImage: !Ref AmazonLinux2LatestAmiId
      Components:
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/update-linux/1.0.0/1"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/docker-ce-linux/1.0.0/1"
        - ComponentArn: !Sub "arn:aws:imagebuilder:${AWS::Region}:aws:component/reboot-linux/1.0.1/1"
      Version: "1.0.0"
      
  EC2ImageBuilderPipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties:
      Name: SampleAmazon2WithDockerPipeline
      ImageRecipeArn: !Ref EC2ImageBuilderRecipe
      InfrastructureConfigurationArn: !Ref EC2ImageBuilderInfrastructureConfiguration
  
  EC2ImageBuilderInfrastructureConfiguration:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties: 
      Name: SampleInstanceConfigurationForEC2ImageBuilder
      InstanceTypes: 
        - !Ref BuildInstanceType
      InstanceProfileName: !Ref EC2ImageBuilderIAMInstanceProfile
      SNSTopicArn: !Ref ImageBuilderSNSTopic
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds: 
        - !GetAtt VPC.DefaultSecurityGroup
      TerminateInstanceOnFailure: true
  
  EC2ImageBuilderIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilder
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  
  EC2ImageBuilderIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2ImageBuilderIAMRole

###########
# Application Load Balancer 
###########
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: WebServerALB
      Scheme: internet-facing
      SubnetMappings:
        - SubnetId:  
            Fn::ImportValue: !Sub '${ExportStackName}-PublicSubnet1'
        - SubnetId:  
            Fn::ImportValue: !Sub '${ExportStackName}-PublicSubnet2'
      IpAddressType: ipv4
      SecurityGroups: 
        - !Ref ASConfigGroup

################################
# Application Load Balancer TargetGroup
################################
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ALB-Target
      TargetType: instance
      HealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 30
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 86400
      Protocol: HTTP
      Port: 80
      VpcId:
        Fn::ImportValue: !Sub '${ExportStackName}-LabVPC'


############################
# Application Load Balancer Listener
############################
  LoadBalancerListener:
   Type: AWS::ElasticLoadBalancingV2::Listener
   Properties:
     DefaultActions:
       - Type: "forward"
         ForwardConfig:
           TargetGroups: 
            - TargetGroupArn: !Ref LoadBalancerTargetGroup
     LoadBalancerArn: !Ref LoadBalancer
     Port: 80
     Protocol: "HTTP"



#################
# Auto Scaling Group
#################  
  SampleAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: "1"
      MaxSize: "4"
      DesiredCapacity: "2"
      HealthCheckGracePeriod: 180
      HealthCheckType: ELB
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub '${ExportStackName}-PublicSubnet1'
        - Fn::ImportValue: !Sub '${ExportStackName}-PublicSubnet2'
      LaunchTemplate: 
        LaunchTemplateId: !Ref SampleLaunchTemplate
        Version: !GetAtt SampleLaunchTemplate.LatestVersionNumber
      TargetGroupARNs: 
        - !Ref LoadBalancerTargetGroup
      MetricsCollection: 
        - Granularity: "1Minute"
      CapacityRebalance: true
      NotificationConfigurations:
      - TopicARN: !Ref SnsTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        - autoscaling:TEST_NOTIFICATION
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
          PropagateAtLaunch: true
  
###############
# LaunchTemplate
###############
  SampleLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref AmazonLinux2LatestAmiId
        InstanceType: !Ref SampleAutoScalingGroupInstanceType
        SecurityGroups:
          - !Ref ASConfigGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt update -y
          sudo apt install -y awscli
          sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo apt install unzip  
          sudo unzip awscliv2.zip
          sudo ./aws/install

          dbaddr='$mysql_hostname='"'"`aws cloudformation describe-stacks --query 'Stacks[].Outputs[?OutputKey==\`RDSEndPointAddress\`].OutputValue' --output=text --region=ap-northeast-2`"';"
          sudo sed -i "2s/.*/$dbaddr/g" /var/www/html/basic/login/dbconn.php
 
###########
# Auto Scaling Config Security Group
###########

  ASConfigGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ASConfig
      GroupDescription: ASG Config Security Group
      VpcId: 
        Fn::ImportValue: !Sub '${ExportStackName}-LabVPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ASConfig

############
# AS-CPU-Policy
############
  myCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref SampleAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60.00

###########
# SNS-Topic
###########
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: topic-sns
      FifoTopic: False
      TopicName: Project-sns

###########
# SNS-Subscription
###########
  SnsSub:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref Email
      Protocol: Email
      TopicArn: !Ref SnsTopic 
  